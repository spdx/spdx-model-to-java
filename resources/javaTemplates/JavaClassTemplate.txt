/**
 * SPDX-FileCopyrightText: Copyright (c) {{{year}}} Source Auditor Inc.
 * SPDX-FileType: SOURCE
 * SPDX-License-Identifier: Apache-2.0
 * DO NOT EDIT - this file is generated by the Owl to Java Utility
 * See: <a href="https://github.com/spdx/tools-java">tools-java</a>
*/
package {{{pkgName}}};

{{#imports}}
{{.}}
{{/imports}}

{{{classComments}}}
public {{#abstract}}abstract{{/abstract}} class {{{className}}} extends {{{superClass}}} {{#compareUsingProperties}}implements Comparable<{{{className}}}>{{/compareUsingProperties}} {

	{{#objectPropertyValueCollection}}
	{{^superSetter}}
	Collection<{{{type}}}> {{{propertyName}}}s = Collections.emptyList();
	{{/superSetter}}
	{{/objectPropertyValueCollection}}
	{{#stringCollection}}
	{{^superSetter}}
	Collection<String> {{{propertyName}}}s = Collections.emptyList();
	{{/superSetter}}
	{{/stringCollection}}
	{{#objectPropertyValueSet}}
	{{^superSetter}}
	Set<{{{type}}}> {{{propertyName}}}s = Collections.emptySet();
	{{/superSetter}}
	{{/objectPropertyValueSet}}
	{{#enumPropertyValueCollection}}
	{{^superSetter}}
	Collection<{{{type}}}> {{{propertyName}}}s = Collections.emptyList();
	{{/superSetter}}
	{{/enumPropertyValueCollection}}
	
	/**
	 * Create the {{{className}}} with default model store and generated anonymous ID
	 * @throws InvalidSPDXAnalysisException when unable to create the {{{className}}}
	 */
	public {{{className}}}() throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore().getNextId(IdType.Anonymous));
	}

	/**
	 * Create the {{{className}}} with the provided objectUri and default model store
	 * @param objectUri URI or anonymous ID for the {{{className}}}
	 * @throws InvalidSPDXAnalysisException when unable to create the {{{className}}}
	 */
	public {{{className}}}(String objectUri) throws InvalidSPDXAnalysisException {
		this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(), 
				true, DefaultModelStore.getDefaultDocumentUri() + "#");
	}

	/**
	 * Create the {{{className}}} specifying the modelStore, objectUri and optional copyManager
	 * @param modelStore Model store where the {{{className}}} is to be stored
	 * @param objectUri URI or anonymous ID for the {{{className}}}
	 * @param copyManager Copy manager for the {{{className}}} - can be null if copying is not required
	 * @param create true if {{{className}}} is to be created
	 * @param idPrefix - prefix to be used when generating new SPDX IDs
	 * @throws InvalidSPDXAnalysisException when unable to create the {{{className}}}
	 */
	 {{#suppressUnchecked}}
	 @SuppressWarnings("unchecked")
	 {{/suppressUnchecked}}
	public {{{className}}}(IModelStore modelStore, String objectUri, @Nullable IModelCopyManager copyManager,
			boolean create, String idPrefix) throws InvalidSPDXAnalysisException {
		super(modelStore, objectUri, copyManager, create, idPrefix);
		{{#objectPropertyValueCollection}}
		{{^superSetter}}
		if (!isExternal()) {
			{{{propertyName}}}s = (Collection<{{{type}}}>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.{{{propertyConstant}}}, {{{type}}}.class);
		}
		{{/superSetter}}
		{{/objectPropertyValueCollection}}
		{{#enumPropertyValueCollection}}
		{{^superSetter}}
		if (!isExternal()) {
			{{{propertyName}}}s = (Collection<{{{type}}}>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.{{{propertyConstant}}}, {{{type}}}.class);
		}
		{{/superSetter}}
		{{/enumPropertyValueCollection}}
		{{#stringCollection}}
		{{^superSetter}}
		if (!isExternal()) {
			{{{propertyName}}}s = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.{{{propertyConstant}}}, String.class);
		}
		{{/superSetter}}
		{{/stringCollection}}
		{{#objectPropertyValueSet}}
		{{^superSetter}}
		if (!isExternal()) {
			{{{propertyName}}}s = (Set<{{{type}}}>)(Set<?>)this.getObjectPropertyValueSet(SpdxConstantsV3.{{{propertyConstant}}}, {{{type}}}.class);
		}
		{{/superSetter}}
		{{/objectPropertyValueSet}}
		{{#stringProperty}}
		{{#isSpecVersion}}
		String specVersion = getSpecVersion();
		if (Objects.nonNull(specVersion)) {
			super.specVersion = specVersion;
		}
		{{/isSpecVersion}}
		{{/stringProperty}}
	}

	/**
	 * Create the {{{className}}} from the builder - used in the builder class
	 * @param builder Builder to create the {{{className}}} from
	 * @throws InvalidSPDXAnalysisException when unable to create the {{{className}}}
	 */
	 {{#suppressUnchecked}}
	 @SuppressWarnings("unchecked")
	 {{/suppressUnchecked}}
	protected {{{className}}}({{{className}}}Builder builder) throws InvalidSPDXAnalysisException {
		super(builder);
		{{#objectPropertyValueCollection}}
		{{^superSetter}}
		{{{propertyName}}}s = (Collection<{{{type}}}>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.{{{propertyConstant}}}, {{{type}}}.class);
		{{/superSetter}}
		{{/objectPropertyValueCollection}}
		{{#enumPropertyValueCollection}}
		{{^superSetter}}
		{{{propertyName}}}s = (Collection<{{{type}}}>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.{{{propertyConstant}}}, {{{type}}}.class);
		{{/superSetter}}
		{{/enumPropertyValueCollection}}
		{{#stringCollection}}
		{{^superSetter}}
		{{{propertyName}}}s = (Collection<String>)(Collection<?>)this.getObjectPropertyValueCollection(SpdxConstantsV3.{{{propertyConstant}}}, String.class);
		{{/superSetter}}
		{{/stringCollection}}
		{{#objectPropertyValueSet}}
		{{^superSetter}}
		{{{propertyName}}}s = (Set<{{{type}}}>)(Set<?>)this.getObjectPropertyValueSet(SpdxConstantsV3.{{{propertyConstant}}}, {{{type}}}.class);
		{{/superSetter}}
		{{/objectPropertyValueSet}}
		{{#objectPropertyValueCollection}}
		{{^superSetter}}
		{{{getter}}}s().addAll(builder.{{{propertyName}}}s);
		{{/superSetter}}
		{{/objectPropertyValueCollection}}
		{{#enumPropertyValueCollection}}
		{{^superSetter}}
		{{{getter}}}s().addAll(builder.{{{propertyName}}}s);
		{{/superSetter}}
		{{/enumPropertyValueCollection}}
		{{#stringCollection}}
		{{^superSetter}}
		{{{getter}}}s().addAll(builder.{{{propertyName}}}s);
		{{/superSetter}}
		{{/stringCollection}}
		{{#objectPropertyValueSet}}
		{{^superSetter}}
		{{{getter}}}s().addAll(builder.{{{propertyName}}}s);
		{{/superSetter}}
		{{/objectPropertyValueSet}}
		{{#elementProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/elementProperties}}
		{{#objectProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/objectProperties}}
		{{#anyLicenseInfoProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/anyLicenseInfoProperties}}
		{{#licenseAdditionProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/licenseAdditionProperties}}
		{{#extendableLicenseProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/extendableLicenseProperties}}
		{{#enumerationProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/enumerationProperties}}
		{{#booleanProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/booleanProperties}}
		{{#integerProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/integerProperties}}
		{{#doubleProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/doubleProperties}}
		{{#stringProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		if (Objects.nonNull(builder.{{{propertyName}}})) {
			{{{setter}}}(builder.{{{propertyName}}});
		}
		{{/nonOptional}}
		{{^nonOptional}}
		{{{setter}}}(builder.{{{propertyName}}});
		{{/nonOptional}}
		{{/superSetter}}
		{{/stringProperties}}
	}

	/** (non-Javadoc)
	 * @see org.spdx.library.core.CoreModelObject#getType()
	 */
	@Override
	public String getType() {
		return "{{{classProfile}}}.{{{className}}}";
	}
	
	// Getters and Setters
	{{#objectPropertyValueCollection}}
	{{^superSetter}}
	/**
	 * Gets the {{{propertyName}}} collection
	 * @return the {{{propertyName}}} collection
	*/
	public Collection<{{{type}}}> {{{getter}}}s() {
		return {{{propertyName}}}s;
	}
	{{/superSetter}}
	{{/objectPropertyValueCollection}}
	{{#enumPropertyValueCollection}}
	{{^superSetter}}
	/**
	 * Gets the {{{propertyName}}} collection
	 * @return the {{{propertyName}}} collection
	*/
	public Collection<{{{type}}}> {{{getter}}}s() {
		return {{{propertyName}}}s;
	}
	{{/superSetter}}
	{{/enumPropertyValueCollection}}
	{{#stringCollection}}
	{{^superSetter}}
	/**
	 * Gets the {{{propertyName}}} collection
	 * @return the {{{propertyName}}} collection
	*/
	public Collection<String> {{{getter}}}s() {
		return {{{propertyName}}}s;
	}
	{{/superSetter}}
	{{/stringCollection}}
	{{#objectPropertyValueSet}}
	{{^superSetter}}
	/**
	 * Gets the {{{propertyName}}} set
	 * @return the {{{propertyName}}} set
	*/
	public Set<{{{type}}}> {{{getter}}}s() {
		return {{{propertyName}}}s;
	}
	{{/superSetter}}
	{{/objectPropertyValueSet}}
	{{#elementProperties}}
	{{#nonOptional}}
	/**
	 * Gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public @Nullable Element {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<Element> retval = getElementPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		return retval.isPresent() ? retval.get() : null;
	}
	{{/nonOptional}}
	{{^nonOptional}}
	/**
	 * Gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public Optional<Element> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return getElementPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
	}
	{{/nonOptional}}
	
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable Element {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#isSpecVersion}}
		super.{{{propertyName}}} = {{{propertyName}}};
		{{/isSpecVersion}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		{{^superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		{{/superSetter}}
		return this;
	}
	{{/elementProperties}}
	
	{{#objectProperties}}
	{{^superSetter}}
	{{#nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	 @SuppressWarnings("unchecked")
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		if (retval.isPresent()) {
			if (!(retval.get() instanceof {{{type}}})) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for {{{propertyName}}}");
			}
			return ({{{type}}})(retval.get());
		} else {
			return null;
		}
	}
	{{/nonOptional}}	
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	 @SuppressWarnings("unchecked")
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<Object> retval = getObjectPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		if (retval.isPresent()) {
			if (!(retval.get() instanceof {{{type}}})) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for {{{propertyName}}}");
			}
			return (Optional<{{{type}}}>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	{{/nonOptional}}
	
	/**
	 * set the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#isSpecVersion}}
		super.specVersion = {{{propertyName}}};
		{{/isSpecVersion}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	 @Override
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}	
	{{/superSetter}}
	{{/objectProperties}}
	{{#anyLicenseInfoProperties}}
	{{^superSetter}}
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return getAnyLicenseInfoPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
	}
	{{/nonOptional}}
	{{#nonOptional}}
	/**
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<SimpleLicensingAnyLicenseInfo> retval = getAnyLicenseInfoPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		return retval.isPresent() ? retval.get() : null;
	}
	{{/nonOptional}}
		
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	 @Override
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{/anyLicenseInfoProperties}}
	{{#licenseAdditionProperties}}
	{{^superSetter}}
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return getLicenseAdditionPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
	}
	{{/nonOptional}}
	{{#nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<LicenseAddition> retval = getLicenseAdditionPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		return retval.isPresent() ? retval.get() : null;
	}
	{{/nonOptional}}
		
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	 @Override
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{/licenseAdditionProperties}}
	{{#extendableLicenseProperties}}
	{{^superSetter}}
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return getExtendableLicensePropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
	}
	{{/nonOptional}}
	{{#nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<ExtendableLicense> retval = getExtendableLicensePropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		return retval.isPresent() ? retval.get() : null;
	}
	{{/nonOptional}}
		
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	 @Override
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{/extendableLicenseProperties}}
	{{#enumerationProperties}}
	{{^superSetter}}
	{{#nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public @Nullable {{{type}}} {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		if (retval.isPresent()) {
			if (!(retval.get() instanceof {{{type}}})) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for {{{propertyName}}}");
			}
			return ({{{type}}})(retval.get());
		} else {
			return null;
		}
	}
	{{/nonOptional}}
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	 @SuppressWarnings("unchecked")
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<Enum<?>> retval = getEnumPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		if (retval.isPresent()) {
			if (!(retval.get() instanceof {{{type}}})) {
				throw new InvalidSPDXAnalysisException("Incorrect type stored for {{{propertyName}}}");
			}
			return (Optional<{{{type}}}>)(Optional<?>)(retval);
		} else {
			return Optional.empty();
		}
	}
	{{/nonOptional}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	 @Override
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}	
	{{/superSetter}}
	{{/enumerationProperties}}
	{{#booleanProperties}}
	{{^superSetter}}
	{{#nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public @Nullable Boolean {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<Boolean> retval = getBooleanPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		return retval.isPresent() ? retval.get() : null;
	}
	{{/nonOptional}}	
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return getBooleanPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
	}
	{{/nonOptional}}
	
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{/booleanProperties}}
	{{#integerProperties}}
	{{^superSetter}}
	{{#nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public @Nullable Integer {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<Integer> retval = getIntegerPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		return retval.isPresent() ? retval.get() : null;
	}
	{{/nonOptional}}
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return getIntegerPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
	}
	{{/nonOptional}}
	
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#min}}
		if (isStrict() && Objects.nonNull({{{propertyName}}}) && {{{propertyName}}} < {{{min}}}) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} value " + {{{propertyName}}} + " is less than the minimum {{{min}}} in {{{className}}}");
		}
		{{/min}}
		{{#max}}
		if (isStrict() && Objects.nonNull({{{propertyName}}}) && {{{propertyName}}} > {{{max}}}) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} value " + {{{propertyName}}} + " is greater than the maximum {{{max}}} in {{{className}}}");
		}
		{{/max}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	@Override
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}	
	{{/superSetter}}
	{{/integerProperties}}
	{{#doubleProperties}}
	{{^superSetter}}
	{{#nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public @Nullable Double {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<Double> retval = getDoublePropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		return retval.isPresent() ? retval.get() : null;
	}
	{{/nonOptional}}
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public Optional<{{{type}}}> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return getDoublePropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
	}
	{{/nonOptional}}

	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException
	 */
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#min}}
		if (isStrict() && Objects.nonNull({{{propertyName}}}) && {{{propertyName}}} < {{{min}}}) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} value " + {{{propertyName}}} + " is less than the minimum {{{min}}} in {{{className}}}");
		}
		{{/min}}
		{{#max}}
		if (isStrict() && Objects.nonNull({{{propertyName}}}) && {{{propertyName}}} > {{{max}}}) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} value " + {{{propertyName}}} + " is greater than the maximum {{{max}}} in {{{className}}}");
		}
		{{/max}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException
	 */
	@Override
	public {{{className}}} {{{setter}}}(@Nullable {{{type}}} {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{/doubleProperties}}
	{{#stringProperties}}
	{{^superSetter}}
	{{#nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public @Nullable String {{{getter}}}() throws InvalidSPDXAnalysisException {
		Optional<String> retval = getStringPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
		return retval.isPresent() ? retval.get() : null;
	}
	{{/nonOptional}}	
	{{^nonOptional}}
	/**
	 * gets the {{{propertyName}}}
	 * @return the {{{propertyName}}}
	 */
	public Optional<String> {{{getter}}}() throws InvalidSPDXAnalysisException {
		return getStringPropertyValue(SpdxConstantsV3.{{{propertyConstant}}});
	}
	{{/nonOptional}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	public {{{className}}} {{{setter}}}(@Nullable String {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		{{#required}}
		if (isStrict() && Objects.isNull({{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} is a required property");
		}
		{{/required}}
		{{#pattern}}
		if (isStrict() && Objects.nonNull({{{propertyName}}}) && !Pattern.matches("{{{pattern}}}", {{{propertyName}}})) {
			throw new InvalidSPDXAnalysisException("{{{propertyName}}} value '" + {{{propertyName}}} + 
				"' does not match the pattern '{{{pattern}}}'");
		}
		{{/pattern}}
		{{#superSetter}}
		super.{{{setter}}}({{{propertyName}}});
		{{/superSetter}}
		setPropertyValue(SpdxConstantsV3.{{{propertyConstant}}}, {{{propertyName}}});
		return this;
	}
	{{/superSetter}}
	{{#superSetter}}
	/**
	 * sets the {{{propertyName}}}
	 * @param {{{propertyName}}} the {{{propertyName}}} to set
	 * @return this to chain setters
	 * @throws InvalidSPDXAnalysisException 
	 */
	 @Override
	public {{{className}}} {{{setter}}}(@Nullable String {{{propertyName}}}) throws InvalidSPDXAnalysisException {
		super.{{{setter}}}({{{propertyName}}});
		return this;
	}	
	{{/superSetter}}
	{{/stringProperties}}
	
	{{#compareUsingProperties}}
	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	@Override
	public int compareTo({{{className}}} o) {
		int retval = 0;
		{{#compareProperties}}
		{{#nonOptional}}
		{{{type}}} my{{{name}}} = {{{getter}}}();
		{{{type}}} compare{{{.name}}} = o.{{{getter}}}();
		if (Objects.isNull(my{{{name}}}) && Objects.nonNull(compare{{{.name}}}) {
			return 1;
		else if (Objects.nonNull(my{{{name}}}) && Objects.isNull(compare{{{.name}}}) {
			return -1;
		else {
			retval = {{{getter}}}().compareTo(o.{{{getter}}}());
		}
		{{/nonOptional}}
		{{^nonOptional}}
		Optional<{{{type}}}> my{{{name}}} = {{{getter}}}();
		Optional<{{{type}}}> compare{{{.name}}} = o.{{{getter}}}();
		if (my{{{name}}}.isPresent() && !compare{{{name}}}.isPresent()) {
			retval = 1;
		else if (!my{{{name}}}.isPresent() && compare{{{name}}}.isPresent()) {
			retval = -1;
		else {
			retval = my{{{name}}}.get().compareTo(compare{{{name}}}.get());
		}
		{{/nonOptional}}
		if (retval != 0) {
			return retval;
		}
		{{/compareProperties}}
		return retval;
	}
	{{/compareUsingProperties}}
	
	@Override
	public String toString() {
		{{^toString}}
		return "{{{className}}}: "+getObjectUri();
		{{/toString}}
		{{{toString}}}
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.library.model.v3.ModelObjectV3#_verify(java.util.List)
	 */
	@Override
	public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<IndividualUriValue> profiles) {
		List<String> retval = new ArrayList<>();
		{{#verifySuperclass}}
		retval.addAll(super._verify(verifiedIds, specVersionForVerify, profiles));
		{{/verifySuperclass}}
		{{#elementProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		Element {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if (Objects.nonNull({{{propertyName}}})) {
				retval.addAll({{{propertyName}}}.verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
		{{^nonOptional}}
		Optional<Element> {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if ({{{propertyName}}}.isPresent()) {
				retval.addAll({{{propertyName}}}.get().verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
			{{#required}}
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
					retval.add("Missing {{{propertyName}}} in {{{propertyName}}}");
			{{/required}}
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/elementProperties}}
		{{#objectProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		{{{type}}} {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if (Objects.nonNull({{{propertyName}}})) {
				retval.addAll({{{propertyName}}}.verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
		{{^nonOptional}}
		Optional<{{{type}}}> {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if ({{{propertyName}}}.isPresent()) {
				retval.addAll({{{propertyName}}}.get().verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
			{{#required}}
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
					retval.add("Missing {{{propertyName}}} in {{{className}}}");
			{{/required}}
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/objectProperties}}
		{{#anyLicenseInfoProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		{{{type}}} {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if (Objects.nonNull({{{propertyName}}})) {
				retval.addAll({{{propertyName}}}.verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
		{{^nonOptional}}
		Optional<{{{type}}}> {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if ({{{propertyName}}}.isPresent()) {
				retval.addAll({{{propertyName}}}.get().verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
			{{#required}}
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
					retval.add("Missing {{{propertyName}}} in {{{className}}}");
			{{/required}}
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/anyLicenseInfoProperties}}
		{{#licenseAdditionProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		{{{type}}} {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if (Objects.nonNull({{{propertyName}}})) {
				retval.addAll({{{propertyName}}}.verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
		{{^nonOptional}}
		Optional<{{{type}}}> {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if ({{{propertyName}}}.isPresent()) {
				retval.addAll({{{propertyName}}}.get().verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
			{{#required}}
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
					retval.add("Missing {{{propertyName}}} in {{{className}}}");
			{{/required}}
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/licenseAdditionProperties}}
		{{#extendableLicenseProperties}}
		{{^superSetter}}
		{{#nonOptional}}
		{{{type}}} {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if (Objects.nonNull({{{propertyName}}})) {
				retval.addAll({{{propertyName}}}.verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
		{{^nonOptional}}
		Optional<{{{type}}}> {{{propertyName}}};
		try {
			{{{propertyName}}} = {{{getter}}}();
			if ({{{propertyName}}}.isPresent()) {
				retval.addAll({{{propertyName}}}.get().verify(verifiedIds, specVersionForVerify, profiles));
		{{/nonOptional}}
			{{#required}}
			} else if (!Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
					retval.add("Missing {{{propertyName}}} in {{{className}}}");
			{{/required}}
			}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/extendableLicenseProperties}}
		{{#enumerationProperties}}
		{{^superSetter}}
		try {
			{{#nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			{{{type}}} {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (Objects.isNull({{{propertyName}}}) && 
						Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{/nonOptional}}
			{{^nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			Optional<{{{type}}}> {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (!{{{propertyName}}}.isPresent() && 
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{/nonOptional}}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/enumerationProperties}}
		{{#booleanProperties}}
		{{^superSetter}}
		try {
			{{#nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			{{{type}}} {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (Objects.isNull({{{propertyName}}}) && 
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{/nonOptional}}
			{{^nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			Optional<{{{type}}}> {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (!{{{propertyName}}}.isPresent() &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{/nonOptional}}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/booleanProperties}}
		{{#integerProperties}}
		{{^superSetter}}
		try {
			{{#nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			{{{type}}} {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (Objects.isNull({{{propertyName}}}) &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{#min}}
			if (Objects.nonNull({{{propertyName}}}) && {{{propertyName}}} < {{{min}}}) {
				retval.add("{{{propertyName}}} value " + {{{propertyName}}} + " is less than the minimum {{{min}}} in {{{className}}}");
			}
			{{/min}}
			{{#max}}
			if (Objects.nonNull({{{propertyName}}}) && {{{propertyName}}} > {{{max}}}) {
				retval.add("{{{propertyName}}} value " + {{{propertyName}}} + " is greater than the maximum {{{max}}} in {{{className}}}");
			}
			{{/max}}
			{{/nonOptional}}
			{{^nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			Optional<{{{type}}}> {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (!{{{propertyName}}}.isPresent() &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{#min}}
			if ({{{propertyName}}}.isPresent() && {{{propertyName}}}.get() < {{{min}}}) {
				retval.add("{{{propertyName}}} value " + {{{propertyName}}}.get() + " is less than the minimum {{{min}}} in {{{className}}}");
			}
			{{/min}}
			{{#max}}
			if ({{{propertyName}}}.isPresent() && {{{propertyName}}}.get() > {{{max}}}) {
				retval.add("{{{propertyName}}} value " + {{{propertyName}}}.get() + " is greater than the maximum {{{max}}} in {{{className}}}");
			}
			{{/max}}
			{{/nonOptional}}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/integerProperties}}
		{{#doubleProperties}}
		{{^superSetter}}
		try {
			{{#nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			{{{type}}} {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (Objects.isNull({{{propertyName}}}) &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{#min}}
			if (Objects.nonNull({{{propertyName}}}) && {{{propertyName}}} < {{{min}}}) {
				retval.add("{{{propertyName}}} value " + {{{propertyName}}} + " is less than the minimum {{{min}}} in {{{className}}}");
			}
			{{/min}}
			{{#max}}
			if (Objects.nonNull({{{propertyName}}}) && {{{propertyName}}} > {{{max}}}) {
				retval.add("{{{propertyName}}} value " + {{{propertyName}}} + " is greater than the maximum {{{max}}} in {{{className}}}");
			}
			{{/max}}
			{{/nonOptional}}
			{{^nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			Optional<{{{type}}}> {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (!{{{propertyName}}}.isPresent() &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{#min}}
			if ({{{propertyName}}}.isPresent() && {{{propertyName}}}.get() < {{{min}}}) {
				retval.add("{{{propertyName}}} value " + {{{propertyName}}}.get() + " is less than the minimum {{{min}}} in {{{className}}}");
			}
			{{/min}}
			{{#max}}
			if ({{{propertyName}}}.isPresent() && {{{propertyName}}}.get() > {{{max}}}) {
				retval.add("{{{propertyName}}} value " + {{{propertyName}}}.get() + " is greater than the maximum {{{max}}} in {{{className}}}");
			}
			{{/max}}
			{{/nonOptional}}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/doubleProperties}}
		{{#stringProperties}}
		{{^superSetter}}
		try {
			{{#nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			String {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (Objects.isNull({{{propertyName}}}) &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{#pattern}}
			if (Objects.nonNull({{{propertyName}}}) && !Pattern.matches("{{{pattern}}}", {{{propertyName}}})) {
				retval.add("{{{propertyName}}} value '" + {{{propertyName}}} + 
					"' does not match the pattern '{{{pattern}}}'");
			}
			{{/pattern}}
			{{/nonOptional}}
			{{^nonOptional}}
			{{^hasConstraint}}
			@SuppressWarnings("unused")
			{{/hasConstraint}}
			Optional<String> {{{propertyName}}} = {{{getter}}}();
			{{#required}}
			if (!{{{propertyName}}}.isPresent() &&
					Collections.disjoint(profiles, Arrays.asList(new ProfileIdentifierType[] { {{{requiredProfiles}}} }))) {
				retval.add("Missing {{{propertyName}}} in {{{className}}}");
			}
			{{/required}}
			{{#pattern}}
			if ({{{propertyName}}}.isPresent() && !Pattern.matches("{{{pattern}}}", {{{propertyName}}}.get())) {
				retval.add("{{{propertyName}}} value '" + {{{propertyName}}}.get() + 
					"' does not match the pattern '{{{pattern}}}'");
			}
			{{/pattern}}
			{{/nonOptional}}
		} catch (InvalidSPDXAnalysisException e) {
			retval.add("Error getting {{{propertyName}}} for {{{className}}}: "+e.getMessage());
		}
		{{/superSetter}}
		{{/stringProperties}}
		{{#objectPropertyValueCollection}}
		{{^superSetter}}
		for ({{{type}}} {{{propertyName}}}:{{{propertyName}}}s) {
			retval.addAll({{{propertyName}}}.verify(verifiedIds, specVersionForVerify, profiles));
		}
		{{#min}}
		if ({{{propertyName}}}s.size() < {{{min}}}) {
			retval.add("{{{propertyName}}}s size " + {{{propertyName}}}s.size() + " is less than {{{min}}} in {{{className}}}");
		}
		{{/min}}
		{{#max}}
		if ({{{propertyName}}}s.size() > {{{max}}}) {
			retval.add("{{{propertyName}}}s size " + {{{propertyName}}}s.size() + " is greater than {{{max}}} in {{{className}}}");
		}
		{{/max}}
		{{/superSetter}}
		{{/objectPropertyValueCollection}}
		{{#enumPropertyValueCollection}}
		{{^superSetter}}
		{{#min}}
		if ({{{propertyName}}}s.size() < {{{min}}}) {
			retval.add("{{{propertyName}}}s size " + {{{propertyName}}}s.size() + " is less than {{{min}}} in {{{className}}}");
		}
		{{/min}}
		{{#max}}
		if ({{{propertyName}}}s.size() > {{{max}}}) {
			retval.add("{{{propertyName}}}s size " + {{{propertyName}}}s.size() + " is greater than {{{max}}} in {{{className}}}");
		}
		{{/max}}
		{{/superSetter}}
		{{/enumPropertyValueCollection}}
		{{#stringCollection}}
		{{^superSetter}}
		{{#pattern}}
		for (String {{{propertyName}}}:{{{propertyName}}}s) {
			if (!Pattern.matches("{{{pattern}}}", {{{propertyName}}})) {
				retval.add("{{{propertyName}}} value '" + {{{propertyName}}} + 
					"' does not match the pattern '{{{pattern}}}'");
			}
		}
		{{/pattern}}
		{{#min}}
		if ({{{propertyName}}}s.size() < {{{min}}}) {
			retval.add("{{{propertyName}}}s size " + {{{propertyName}}}s.size() + " is less than {{{min}}} in {{{className}}}");
		}
		{{/min}}
		{{#max}}
		if ({{{propertyName}}}s.size() > {{{max}}}) {
			retval.add("{{{propertyName}}}s size " + {{{propertyName}}}s.size() + " is greater than {{{max}}} in {{{className}}}");
		}
		{{/max}}
		{{/superSetter}}
		{{/stringCollection}}
		{{#objectPropertyValueSet}}
		{{^superSetter}}
		for ({{{type}}} {{{propertyName}}}:{{{propertyName}}}s) {
			retval.addAll({{{propertyName}}}.verify(verifiedIds, specVersionForVerify, profiles));
		}
		{{#min}}
		if ({{{propertyName}}}s.size() < {{{min}}}) {
			retval.add("{{{propertyName}}}s size " + {{{propertyName}}}s.size() + " is less than {{{min}}} in {{{className}}}");
		}
		{{/min}}
		{{#max}}
		if ({{{propertyName}}}s.size() > {{{max}}}) {
			retval.add("{{{propertyName}}}s size " + {{{propertyName}}}s.size() + " is greater than {{{max}}} in {{{className}}}");
		}
		{{/max}}
		{{/superSetter}}
		{{/objectPropertyValueSet}}
		return retval;
	}
	
	{{{equalsHashOverride}}}

	/**
	 * Builder for {{{className}}}
	 */
	public static {{#abstract}}abstract {{/abstract}}class {{{className}}}Builder extends {{{superClass}}}Builder {
	
		/**
		 * Create an {{{className}}}Builder from another model object copying the modelStore and copyManager and using an anonymous ID
		 * @param from model object to copy the model store and copyManager from
		 * @throws InvalidSPDXAnalysisException
		 */
		public {{{className}}}Builder(ModelObjectV3 from) throws InvalidSPDXAnalysisException {
			this(from, from.getModelStore().getNextId(IdType.Anonymous));
		}
	
		/**
		 * Create an {{{className}}}Builder from another model object copying the modelStore and copyManager
		 * @param from model object to copy the model store and copyManager from
		 * @param objectUri URI for the object
		 * @throws InvalidSPDXAnalysisException if creationInfo can not be fetched from the from
		 */
		public {{{className}}}Builder(ModelObjectV3 from, String objectUri) throws InvalidSPDXAnalysisException {
			this(from.getModelStore(), objectUri, from.getCopyManager());
			setStrict(from.isStrict());
			setIdPrefix(from.getIdPrefix());
			{{#hasCreationInfo}}
			if (from instanceof Element) {
				setCreationInfo(((Element)from).getCreationInfo());
			} else if (from instanceof CreationInfo) {
				setCreationInfo((CreationInfo)from);
			}
			{{/hasCreationInfo}}
		}
		
		/**
		 * Creates a {{{className}}}Builder
		 * @param modelStore model store for the built {{{className}}}
		 * @param objectUri objectUri for the built {{{className}}}
		 * @param copyManager optional copyManager for the built {{{className}}}
		 */
		public {{{className}}}Builder(IModelStore modelStore, String objectUri, @Nullable IModelCopyManager copyManager) {
			super(modelStore, objectUri, copyManager);
		}
		
		{{#objectPropertyValueCollection}}
		{{^superSetter}}
		protected Collection<{{{type}}}> {{{propertyName}}}s = new ArrayList<>();
		{{/superSetter}}
		{{/objectPropertyValueCollection}}
		{{#enumPropertyValueCollection}}
		{{^superSetter}}
		protected Collection<{{{type}}}> {{{propertyName}}}s = new ArrayList<>();
		{{/superSetter}}
		{{/enumPropertyValueCollection}}
		{{#stringCollection}}
		{{^superSetter}}
		protected Collection<String> {{{propertyName}}}s = new ArrayList<>();
		{{/superSetter}}
		{{/stringCollection}}
		{{#objectPropertyValueSet}}
		{{^superSetter}}
		protected Set<{{{type}}}> {{{propertyName}}}s = new HashSet<>();
		{{/superSetter}}
		{{/objectPropertyValueSet}}
		{{#elementProperties}}
		{{^superSetter}}
		protected {{{type}}} {{{propertyName}}} = null;
		{{/superSetter}}
		{{/elementProperties}}
		{{#objectProperties}}
		{{^superSetter}}
		protected {{{type}}} {{{propertyName}}} = null;
		{{/superSetter}}
		{{/objectProperties}}
		{{#anyLicenseInfoProperties}}
		{{^superSetter}}
		protected SimpleLicensingAnyLicenseInfo {{{propertyName}}} = null;
		{{/superSetter}}
		{{/anyLicenseInfoProperties}}
		{{#licenseAdditionProperties}}
		{{^superSetter}}
		protected LicenseAddition {{{propertyName}}} = null;
		{{/superSetter}}
		{{/licenseAdditionProperties}}
		{{#extendableLicenseProperties}}
		{{^superSetter}}
		protected ExtendableLicense {{{propertyName}}} = null;
		{{/superSetter}}
		{{/extendableLicenseProperties}}
		{{#enumerationProperties}}
		{{^superSetter}}
		protected {{{type}}} {{{propertyName}}} = null;
		{{/superSetter}}
		{{/enumerationProperties}}
		{{#booleanProperties}}
		{{^superSetter}}
		protected Boolean {{{propertyName}}} = null;
		{{/superSetter}}
		{{/booleanProperties}}
		{{#integerProperties}}
		{{^superSetter}}
		protected Integer {{{propertyName}}} = null;
		{{/superSetter}}
		{{/integerProperties}}
		{{#doubleProperties}}
		{{^superSetter}}
		protected Double {{{propertyName}}} = null;
		{{/superSetter}}
		{{/doubleProperties}}
		{{#stringProperties}}
		{{^superSetter}}
		protected String {{{propertyName}}} = null;
		{{/superSetter}}
		{{/stringProperties}}
		
		{{#objectPropertyValueCollection}}
		
		/**
		 * Adds a {{{propertyName}}} to the initial collection
		 * @param {{{propertyName}}} {{{propertyName}}} to add
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{adder}}}({{{type}}} {{{propertyName}}}) {
			if (Objects.nonNull({{{propertyName}}})) {
				{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.add({{{propertyName}}});
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial {{{propertyName}}} collection
		 * @param {{{propertyName}}}Collection collection to initialize the {{{propertyName}}}
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{addAller}}}(Collection<{{{type}}}> {{{propertyName}}}Collection) {
			if (Objects.nonNull({{{propertyName}}}Collection)) {
				{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.addAll({{{propertyName}}}Collection);
			}
			return this;
		}
		{{/objectPropertyValueCollection}}
		{{#enumPropertyValueCollection}}
		
		/**
		 * Adds a {{{propertyName}}} to the initial collection
		 * @param {{{propertyName}}} {{{propertyName}}} to add
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{adder}}}({{{type}}} {{{propertyName}}}) {
			if (Objects.nonNull({{{propertyName}}})) {
				{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.add({{{propertyName}}});
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial {{{propertyName}}} collection
		 * @param {{{propertyName}}}Collection collection to initialize the {{{propertyName}}}
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{addAller}}}(Collection<{{{type}}}> {{{propertyName}}}Collection) {
			if (Objects.nonNull({{{propertyName}}}Collection)) {
				{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.addAll({{{propertyName}}}Collection);
			}
			return this;
		}
		{{/enumPropertyValueCollection}}
		{{#stringCollection}}
		
		/**
		 * Adds a {{{propertyName}}} to the initial collection
		 * @param {{{propertyName}}} {{{propertyName}}} to add
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{adder}}}(String {{{propertyName}}}) {
			if (Objects.nonNull({{{propertyName}}})) {
				{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.add({{{propertyName}}});
			}
			return this;
		}
		
		/**
		 * Adds all elements from a collection to the initial {{{propertyName}}} collection
		 * @param {{{propertyName}}}Collection collection to initialize the {{{propertyName}}}
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{addAller}}}(Collection<String> {{{propertyName}}}Collection) {
			if (Objects.nonNull({{{propertyName}}}Collection)) {
				{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.addAll({{{propertyName}}}Collection);
			}
			return this;
		}
		{{/stringCollection}}
		{{#objectPropertyValueSet}}
		
		/**
		 * Adds a {{{propertyName}}} to the initial set
		 * @param {{{propertyName}}} {{{propertyName}}} to add
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{adder}}}({{{type}}} {{{propertyName}}}) {
			if (Objects.nonNull({{{propertyName}}})) {
				{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.add({{{propertyName}}});
			}
			return this;
		}
		
		/**
		 * Adds all elements from a set to the initial {{{propertyName}}} set
		 * @param {{{propertyName}}}Set set to initialize the {{{propertyName}}}
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{addAller}}}(Set<{{{type}}}> {{{propertyName}}}Set) {
			if (Objects.nonNull({{{propertyName}}}Set)) {
				{{#superSetter}}super.{{/superSetter}}{{{propertyName}}}s.addAll({{{propertyName}}}Set);
			}
			return this;
		}
		{{/objectPropertyValueSet}}
		{{#elementProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/elementProperties}}
		{{#objectProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/objectProperties}}
		{{#anyLicenseInfoProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/anyLicenseInfoProperties}}
		{{#licenseAdditionProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/licenseAdditionProperties}}
		{{#extendableLicenseProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/extendableLicenseProperties}}
		{{#enumerationProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/enumerationProperties}}
		{{#booleanProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/booleanProperties}}
		{{#integerProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/integerProperties}}
		{{#doubleProperties}}

		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}({{{type}}} {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/doubleProperties}}
		{{#stringProperties}}
		
		/**
		 * Sets the initial value of {{{propertyName}}}
		 * @param {{{propertyName}}} value to set
		 * @return this for chaining
		**/
		public {{{className}}}Builder {{{setter}}}(String {{{propertyName}}}) {
			{{#superSetter}}super.{{/superSetter}}{{^superSetter}}this.{{/superSetter}}{{{propertyName}}} = {{{propertyName}}};
			return this;
		}
		{{/stringProperties}}
	
		{{^abstract}}
		/**
		 * @return the {{{className}}}
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public {{{className}}} build() throws InvalidSPDXAnalysisException {
			IModelStoreLock lock = getModelStore().enterCriticalSection(false);
			try {
				return new {{{className}}}(this);
			} finally {
				getModelStore().leaveCriticalSection(lock);
			}
		}
		{{/abstract}}
		{{#abstract}}
		/**
		 * @return the {{{className}}}
		 * @throws InvalidSPDXAnalysisException on any errors during build
		 */
		public abstract {{{className}}} build() throws InvalidSPDXAnalysisException;
		{{/abstract}}
	}
}
