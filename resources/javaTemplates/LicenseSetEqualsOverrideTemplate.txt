	/**
	 * Get flatten license set
	 *
	 * License sets can contain other conjunctive license sets as members.  Logically,
	 * the members of these "sub-conjunctive license sets" could be direct members and have the same
	 * meaning.
	 * @return all members "flattening out" license sets which are members of this set
	 * @throws InvalidSPDXAnalysisException
	 */
	public List<AnyLicenseInfo> getFlattenedMembers() throws InvalidSPDXAnalysisException {
		HashSet<AnyLicenseInfo> retval = new HashSet<>();	// Use a set since any duplicated elements would be still considered equal
		Iterator<AnyLicenseInfo> iter = this.{{{licenseMembersGetter}}}().iterator();
		while (iter.hasNext()) {
			AnyLicenseInfo li = iter.next();
			if (li instanceof {{{className}}}) {
				// we need to flatten this out
				List<AnyLicenseInfo> members = (({{{className}}})li).getFlattenedMembers();
				for (int i = 0; i < members.size(); i++) {
					retval.add(members.get(i));
				}
			} else {
				retval.add(li);
			}
		}
		List<AnyLicenseInfo> retvallist = new ArrayList<>();
		retvallist.addAll(retval);
		return retvallist;
	}

	@Override
	public int hashCode() {
		// We override equals and hashcode to take into account flattening of the license set
		// Calculate a hashcode by XOR'ing all of the hashcodes of the license set
		int retval = {{{primeNumber}}};	// Prime number
		List<AnyLicenseInfo> allMembers;
		try {
			allMembers = this.getFlattenedMembers();
		} catch (InvalidSPDXAnalysisException e) {
			throw new RuntimeException("Error getting license set members",e);
		}
		for (AnyLicenseInfo licenseInfo:allMembers) {
			retval = retval ^ licenseInfo.hashCode();
		}
		return retval;
	}

	/* (non-Javadoc)
	 * @see org.spdx.rdfparser.license.AnyLicenseInfo#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object o) {
		// We override equals and hashcode to take into account flattening of the license set
		if (o == this) {
			return true;
		}
		if (!(o instanceof {{{className}}})) {
			// covers o == null, as null is not an instance of anything
			return false;
		}
		{{{className}}} comp = ({{{className}}})o;
		List<AnyLicenseInfo> compInfos;
		try {
			compInfos = comp.getFlattenedMembers();
		} catch (InvalidSPDXAnalysisException e) {
			throw new RuntimeException("Error getting compare license set members",e);
		}
		List<AnyLicenseInfo> myInfos;
		try {
			myInfos = this.getFlattenedMembers();
		} catch (InvalidSPDXAnalysisException e) {
			throw new RuntimeException("Error getting license set members",e);
		}
		if (compInfos.size() != myInfos.size()) {
			return false;
		}
		for (AnyLicenseInfo myInfo:myInfos) {
			if (!compInfos.contains(myInfo)) {
				return false;
			}
		}
		return true;
	}
	
	/* (non-Javadoc)
	 * @see org.spdx.rdfparser.model.IRdfModel#equivalent(org.spdx.rdfparser.model.IRdfModel)
	 */
	@Override
	public boolean equivalent(CoreModelObject compare) throws InvalidSPDXAnalysisException {
		if (!(compare instanceof {{{className}}})) {
			return false;
		}
		return setsEquivalent(({{{className}}})compare);
	}

	protected boolean setsEquivalent({{{className}}} compare) throws InvalidSPDXAnalysisException {
		List<AnyLicenseInfo> compInfos;
		try {
			compInfos = compare.getFlattenedMembers();
		} catch (InvalidSPDXAnalysisException e) {
			throw new RuntimeException("Error getting compare license set members",e);
		}
		List<AnyLicenseInfo> myInfos;
		try {
			myInfos = this.getFlattenedMembers();
		} catch (InvalidSPDXAnalysisException e) {
			throw new RuntimeException("Error getting license set members",e);
		}
		if (compInfos.size() != myInfos.size()) {
			return false;
		}
		for (AnyLicenseInfo myInfo:myInfos) {
			if (!compInfos.contains(myInfo)) {
				boolean found = false;
				for (AnyLicenseInfo compInfo:compInfos) {
					if (myInfo.equivalent(compInfo)) {
						found = true;
						break;
					}
				}
				if (!found) {
					return false;
				}
			}
		}
		return true;
	}
