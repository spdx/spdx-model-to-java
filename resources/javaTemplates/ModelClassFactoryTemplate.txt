/**
 * SPDX-FileCopyrightText: Copyright (c) {{{year}}} Source Auditor Inc.
 * SPDX-FileType: SOURCE
 * SPDX-License-Identifier: Apache-2.0
 */
package org.spdx.library.model.{{versionSuffix}};

import org.spdx.core.IModelCopyManager;
import org.spdx.core.InvalidSPDXAnalysisException;
import org.spdx.library.model.{{versionSuffix}}.core.CreationInfo;
import org.spdx.storage.IModelStore;
import org.spdx.storage.IModelStore.IdType;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Objects;

import javax.annotation.Nullable;


/**
 * Factory class for creating model classes.
 * 
 * The <code>getModelObject</code> method will fetch or create a model object based on the URI for the class
 * 
 * @author Gary O'Neall
 */
public class SpdxModelClassFactoryV3 {

	public static Map<String, Class<?>> SPDX_TYPE_TO_CLASS_V3;
	public static Map<Class<?>, String> SPDX_CLASS_TO_TYPE;
	static {
		Map<String, Class<?>> typeToClassV3 = new HashMap<>();
		
		{{#typeToClass}}
		typeToClassV3.put(SpdxConstantsV3.{{{classConstant}}}, {{{classPath}}}.class);
		{{/typeToClass}}
		typeToClassV3.put(org.spdx.library.model.{{versionSuffix}}.simplelicensing.InvalidLicenseExpression.INVALID_LICENSE_EXPRESSION_TYPE, org.spdx.library.model.{{versionSuffix}}.simplelicensing.InvalidLicenseExpression.class);
		
		SPDX_TYPE_TO_CLASS_V3 = Collections.unmodifiableMap(typeToClassV3);
		
		Map<Class<?>, String> classToType = new HashMap<>();
		for (Entry<String, Class<?>> entry:typeToClassV3.entrySet()) {
			classToType.put(entry.getValue(), entry.getKey());
		}
		
		SPDX_CLASS_TO_TYPE = Collections.unmodifiableMap(classToType);
	}
	
	/**
	 * Create an SPDX spec version 3.0 model object in a model store given the URI for the object
	 * @param modelStore model store where the object is to be created
	 * @param objectUri URI for the object
	 * @param type SPDX class or type
	 * @param copyManager if non-null, allows for copying of properties from other model stores or document URI's when referenced
	 * @param create if true, create the model object if it does not already exist
	 * @param idPrefix optional prefix used for any new object URI's created in support of this model object
	 * @return a ModelObject of type type
	 * @throws InvalidSPDXAnalysisException
	 */
	public static ModelObjectV3 getModelObject(IModelStore modelStore, String objectUri,
			String type, @Nullable IModelCopyManager copyManager, boolean create, String idPrefix) throws InvalidSPDXAnalysisException {
		Objects.requireNonNull(modelStore, "Model store can not be null");
		Objects.requireNonNull(objectUri, "The object URI most not be null");
		
		Class<?> clazz = SPDX_TYPE_TO_CLASS_V3.get(type);
		if (Objects.isNull(clazz)) {
			throw new InvalidSPDXAnalysisException("Unknown SPDX version 3 type: "+type);
		}
		if (Modifier.isAbstract(clazz.getModifiers())) {
			throw new InvalidSPDXAnalysisException("Can not instantiate an abstract class for the SPDX version 3 type: "+type);
		}
		try {
			Constructor<?> con = clazz.getDeclaredConstructor(IModelStore.class, String.class, IModelCopyManager.class, boolean.class, String.class);
			return (ModelObjectV3)con.newInstance(modelStore, objectUri, copyManager, create, idPrefix);
		} catch (NoSuchMethodException e) {
			throw new InvalidSPDXAnalysisException("Could not create the model object SPDX version 3 type: "+type);
		} catch (SecurityException e) {
			throw new InvalidSPDXAnalysisException("Unexpected security exception for SPDX version 3 type: "+type, e);
		} catch (InstantiationException e) {
			throw new InvalidSPDXAnalysisException("Unexpected instantiation exception for SPDX version 3 type: "+type, e);
		} catch (IllegalAccessException e) {
			throw new InvalidSPDXAnalysisException("Unexpected illegal access exception for SPDX version 3 type: "+type, e);
		} catch (IllegalArgumentException e) {
			throw new InvalidSPDXAnalysisException("Unexpected illegal argument exception for SPDX version 3 type: "+type, e);
		} catch (InvocationTargetException e) {
			if (e.getTargetException() instanceof InvalidSPDXAnalysisException) {
				throw (InvalidSPDXAnalysisException)e.getTargetException();
			} else {
				throw new InvalidSPDXAnalysisException("Unexpected invocation target exception for SPDX version 2 type: "+type, e);
			}
		}
	}
	
	/**
	 * Creates a new CreationInfo including a new createdBy Agent - this can be used as a starting point for
	 * building new SPDX data
	 * @param modelStore model store where the creationInfo and Agent is to be created
	 * @param createdByUri The URI for the Agent who is the creator of the SPDX data
	 * @param createdByName The name of the Agent who is the creator of the SPDX data
	 * @param copyManager if non-null, allows for copying of properties from other model stores or document URI's when referenced
	 * @return a new CreationInfo
	 * @throws InvalidSPDXAnalysisException on error
	 */
	public static CreationInfo createCreationInfo(IModelStore modelStore, String createdByUri,
			String createdByName, @Nullable IModelCopyManager copyManager) throws InvalidSPDXAnalysisException {
		Objects.requireNonNull(modelStore, "Model store can not be null");
		Objects.requireNonNull(createdByUri, "The Agent object URI most not be null");
		DateFormat format = new SimpleDateFormat(SpdxConstantsV3.SPDX_DATE_FORMAT);
		String now = format.format(new Date());
		CreationInfo retval = new CreationInfo.CreationInfoBuilder(modelStore, modelStore.getNextId(IdType.Anonymous), copyManager)
				.setCreated(now)
				.setSpecVersion(SpdxConstantsV3.MODEL_SPEC_VERSION)
				.build();
		retval.getCreatedBys().add(retval.createAgent(createdByUri)
											.setName(createdByName)
											.build());
		return retval;
	}
}
