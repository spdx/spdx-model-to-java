/*
 * SPDX-FileCopyrightText: Copyright (c) 2025 Source Auditor Inc.
 * SPDX-FileType: SOURCE
 * SPDX-License-Identifier: Apache-2.0
 * DO NOT EDIT - this file is generated by the Owl to Java Utility
 * See: <a href="https://github.com/spdx/tools-java">tools-java</a>
 */

package org.spdx.library.model.{{versionSuffix}}.simplelicensing;

import org.spdx.core.DefaultModelStore;
import org.spdx.core.IModelCopyManager;
import org.spdx.core.IndividualUriValue;
import org.spdx.core.InvalidSPDXAnalysisException;
import org.spdx.library.model.{{versionSuffix}}.SpdxConstantsV3;
import org.spdx.library.model.{{versionSuffix}}.core.CreationInfo;
import org.spdx.storage.IModelStore;
import org.spdx.storage.PropertyDescriptor;

import javax.annotation.Nullable;

import java.util.*;
import java.util.regex.Pattern;

import static org.spdx.library.model.{{versionSuffix}}.SpdxConstantsV3.SIMPLE_LICENSING_NAMESPACE;

/**
 * Represents a license expression that can not be parsed
 */
public class InvalidLicenseExpression extends LicenseExpression {

    public static final PropertyDescriptor MESSAGE_PROPERTY = new PropertyDescriptor("SimpleLicensing.invalidLicenseMessage", SIMPLE_LICENSING_NAMESPACE);
     public static final String INVALID_LICENSE_EXPRESSION_TYPE = "SimpleLicensing.InvalidLicenseExpression";

    /**
     * Create the InvalidLicenseExpression with default model store and generated anonymous ID
     * @throws InvalidSPDXAnalysisException when unable to create the LicenseExpression
     */
    public InvalidLicenseExpression() throws InvalidSPDXAnalysisException {
        super();
    }

    /**
     * @param objectUri URI or anonymous ID for the LicenseExpression
     * @throws InvalidSPDXAnalysisException when unable to create the LicenseExpression
     */
    public InvalidLicenseExpression(String objectUri) throws InvalidSPDXAnalysisException {
        this(DefaultModelStore.getDefaultModelStore(), objectUri, DefaultModelStore.getDefaultCopyManager(),
                true, DefaultModelStore.getDefaultDocumentUri() + "#");
    }

    /**
     * @param modelStore Model store where the LicenseExpression is to be stored
     * @param objectUri URI or anonymous ID for the LicenseExpression
     * @param copyManager Copy manager for the LicenseExpression - can be null if copying is not required
     * @param create true if LicenseExpression is to be created
     * @param idPrefix - prefix to be used when generating new SPDX IDs
     * @throws InvalidSPDXAnalysisException when unable to create the LicenseExpression
     */
    public InvalidLicenseExpression(IModelStore modelStore, String objectUri, @Nullable IModelCopyManager copyManager,
                                    boolean create, String idPrefix) throws InvalidSPDXAnalysisException {
        super(modelStore, objectUri, copyManager, create, idPrefix);
    }

    @Override
    public String getType() {
        return INVALID_LICENSE_EXPRESSION_TYPE;
    }


    // Getters and Setters

    /**
     * @param creationInfo the creationInfo to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException on model store exceptions
     */
    @Override
    public InvalidLicenseExpression setCreationInfo(@Nullable CreationInfo creationInfo) throws InvalidSPDXAnalysisException {
        super.setCreationInfo(creationInfo);
        return this;
    }
    /**
     * @param summary the summary to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException on model store exceptions
     */
    @Override
    public InvalidLicenseExpression setSummary(@Nullable String summary) throws InvalidSPDXAnalysisException {
        super.setSummary(summary);
        return this;
    }
    /**
     * @param description the description to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException on model store exceptions
     */
    @Override
    public InvalidLicenseExpression setDescription(@Nullable String description) throws InvalidSPDXAnalysisException {
        super.setDescription(description);
        return this;
    }

    /**
     * @param licenseExpression the licenseExpression to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException on model store exceptions
     */
    public InvalidLicenseExpression setLicenseExpression(@Nullable String licenseExpression) throws InvalidSPDXAnalysisException {
        if (isStrict() && Objects.isNull(licenseExpression)) {
            throw new InvalidSPDXAnalysisException("licenseExpression is a required property");
        }
        setPropertyValue(SpdxConstantsV3.PROP_LICENSE_EXPRESSION, licenseExpression);
        return this;
    }

    /**
     * @param licenseListVersion the licenseListVersion to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException on model store exceptions
     */
    public InvalidLicenseExpression setLicenseListVersion(@Nullable String licenseListVersion) throws InvalidSPDXAnalysisException {
        if (isStrict() && Objects.nonNull(licenseListVersion) && !Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$", licenseListVersion)) {
            throw new InvalidSPDXAnalysisException("licenseListVersion value '" + licenseListVersion +
                    "' does not match the pattern '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$'");
        }
        setPropertyValue(SpdxConstantsV3.PROP_LICENSE_LIST_VERSION, licenseListVersion);
        return this;
    }
    /**
     * @param comment the comment to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException on model store exceptions
     */
    @Override
    public InvalidLicenseExpression setComment(@Nullable String comment) throws InvalidSPDXAnalysisException {
        super.setComment(comment);
        return this;
    }
    /**
     * @param name the name to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException on model store exceptions
     */
    @Override
    public InvalidLicenseExpression setName(@Nullable String name) throws InvalidSPDXAnalysisException {
        super.setName(name);
        return this;
    }

    /**
     * @return the licenseExpression
     */
    public @Nullable String getMessage() throws InvalidSPDXAnalysisException {
        Optional<String> retval = getStringPropertyValue(MESSAGE_PROPERTY);
        return retval.orElse(null);
    }
    /**
     * @param message the message to set
     * @return this to chain setters
     * @throws InvalidSPDXAnalysisException on invalid message
     */
    public LicenseExpression setMessage(@Nullable String message) throws InvalidSPDXAnalysisException {
        if (isStrict() && Objects.isNull(message)) {
            throw new InvalidSPDXAnalysisException("Message is a required property");
        }
        setPropertyValue(MESSAGE_PROPERTY, message);
        return this;
    }

    /* (non-Javadoc)
     * @see org.spdx.library.model.v3.ModelObjectV3#_verify(java.util.List)
     */
    @Override
    public List<String> _verify(Set<String> verifiedIds, String specVersionForVerify, List<IndividualUriValue> profiles) {
        List<String> retval = new ArrayList<>();
        try {
            retval.add(String.format("Invalid license expression '%s': %s",
                    getLicenseExpression(), getMessage()));
        } catch(Exception e) {
            retval.add(String.format("Error getting properties: %s", e.getMessage()));
        }
        return retval;
    }
}
